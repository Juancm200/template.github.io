{"slug":"ionic-animal-crossing-companion","title":"Developing an Animal Crossing companion app with Ionic","date":"2020-07-28T00:00:00.000Z","excerpt":"No bells were spent while building this app.","tags":["Ionic","PWA","Open Source","Games"],"html":"<p>This year I’ve played a lot of Animal Crossing New Horizons. It came out at the start of quarantine - and was extremely popular for providing an escape from that, with a virtual life that’s free of the problems we’re facing on the real one.</p>\n<p>In the meantime, I was re-discovering <a href=\"https://ionicframework.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Ionic</a> and wanted to work on an app that would help me improve my knowledge of it, and as a bonus learn about other stuff I’ve been interested in. So, I decided to work on a companion app for the game I’ve been playing so much.</p>\n<p>This post illustrates my experience developing it. It is not a tutorial or an in-depth guide. It’s just meant to describe my experience, what I learned and any bumps in the way. In any case, the <a href=\"https://github.com/matfantinel/acnh-pocket-companion\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">source code is available on GitHub</a> for all to see and modify. If it ends up helping anyone else in the way, even better!</p>\n<p><a href=\"https://pocketcompanion.fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can check out the finalized app here</a>.</p>\n<h2 id=\"creating-the-app\">Creating the app<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#creating-the-app\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since I’m testing Ionic (version 5 as of writing), I tried to check out as much of the experience they provide as I could. Even though you can create an app via their CLI, they also provide <a href=\"https://ionicframework.com/start\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">an online App Wizard</a> to do that visually. It’s a pretty cool way to display the starting templates, easily setting theme colors, default icon and the JS Framework you’ll use. I chose Angular for this one.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/wizard.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/wizard.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/ionic-animal-crossing-companion/wizard.png\" alt=\"Ionic app creation Wizard\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After setting it up, the wizard gives you a CLI command with an ID to run on your machine. Therefore it still uses the CLI in the end, but it’s a nice touch for the starting experience.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/all-set.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/all-set.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/ionic-animal-crossing-companion/all-set.png\" alt=\"The wizard gives you a CLI command with an ID for you to run on your machine\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After running that command, the CLI prompted me if I wanted to integrate with <a href=\"https://capacitorjs.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Capacitor</a>, which is a tool that makes the app deployable to Android/iOS. I accepted, since I plan to release it on the Play Store at some point. The main goal is to release the app as a <a href=\"/what-are-pwas-and-why-should-i-care-about-them/\">PWA</a>, but an Android version wouldn’t hurt, since the publishing process is almost-free and there’s almost zero extra effort involved. Publishing it for iPhones is not a goal due to the cost and effort required to publish on the App Store.</p>\n<p>After installation, I could run the app with <code>ionic serve</code>, which resulted in a template app with the settings I had set on the App Wizard.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/initial-template.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/initial-template.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/ionic-animal-crossing-companion/initial-template.png\" alt=\"The app created from the template created earlier\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>The default folder structure is pretty straightforward and should be familiar to anyone who has ever worked with Angular before.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/default-folder-structure.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/default-folder-structure.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/ionic-animal-crossing-companion/default-folder-structure.png\" alt=\"Default folder structure on an Ionic Angular app\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<h2 id=\"starting-development\">Starting development<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#starting-development\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since I am a visual person, I decided to start work by changing the looks of the app first. This helps me stay motivated since I can see progress faster (because everything I do results in a visual change), and it also allows me to visualize the final product earlier, and gives me more time to think of good features or UX improvements.</p>\n<p>Even though I generated my project using the Tabs template, I decided that I don’t want tabs in my app. So I had to do a few changes to the routing configuration.</p>\n<p>First, I created a new page that I can use as the initial screen for my app. Ionic CLI makes it easy to create pages and components. Just running <code>ionic generate page home</code> created a page called Home, and automatically adds its modules to the Angular config, and its route to the Angular Router.</p>\n<p>After that, to remove the tabs, all I had to do was set the default route (<code>&#39;&#39;</code>) to redirect to home, and then I could delete all the Tab pages.</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">app-routing.module.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> NgModule <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> PreloadAllModules<span class=\"token punctuation\">,</span> RouterModule<span class=\"token punctuation\">,</span> Routes <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> Routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    redirectTo<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span>\n    pathMatch<span class=\"token operator\">:</span> <span class=\"token string\">'full'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">loadChildren</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./home/home.module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>HomePageModule<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    RouterModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> preloadingStrategy<span class=\"token operator\">:</span> PreloadAllModules <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>RouterModule<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppRoutingModule</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2 id=\"theming-and-layout\">Theming and Layout<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#theming-and-layout\"><span class=\"heading-link\">#</span></a></h2>\n<p>For me, this is the best part. Ionic makes it SO easy to change themes! There’s a <code>variables.scss</code> file on the <code>theme</code> folder, where you can find Ionic’s default color palette and change anything. But they provide <a href=\"https://ionicframework.com/docs/theming/color-generator\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">an amazing Color Generator</a> that can make all the palette calculations for you. Just put your primary/secondary/success/danger/etc colors in there, and it will output the code for you to paste on your app.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/color-generator.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/color-generator.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/ionic-animal-crossing-companion/color-generator.png\" alt=\"Ionic's color generation\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After some time styling, I modified the layout of the two page skeletons I wanna have, the Home page (that mimics the Nookphone in the game), and I styled the header of the other pages.</p>\n<p><img src=\"/images/posts/ionic-animal-crossing-companion/skeleton.gif\" alt=\"Gif of my app's base skeleton\"></p>\n<p>Since I wanted to have the same header on all pages, I ended up creating a component for it. Since I had already two components and six pages, I decided to split them up in different folders (I honestly don’t know why Ionic doesn’t do that by default). My folder structure ended up like this:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/modified-folder-structure.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/ionic-animal-crossing-companion/modified-folder-structure.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/ionic-animal-crossing-companion/modified-folder-structure.png\" alt=\"The folder structure after my modifications\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>Also, to be able to import the same component into multiple Pages (each page with its own module), I had to create the ComponentsModule. This required a bit of searching because I wasn’t familiar with this approach yet. ComponentsModule by itself is very simple, I just import the Components there:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">components.module.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> NgModule <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> CoolHeaderComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cool-header/cool-header.component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> IonicModule <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ionic/angular'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CoolHeaderComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>IonicModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CoolHeaderComponent<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentsModule</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The annoying part was having to add ComponentsModule to each of the pages. There probably is an easier way of handling this, but right now I decided to not dig too deep into it.</p>\n<p>After making the skeleton of the app, I started working on some specific pages. I started with the home screen, that mimics a cell phone’s app grid. I’ll probably add more options as the app evolves, but for now this is good enough to build the layout with.</p>\n<p>The next screen to be done was the <em>Island</em> one. It is a simple form with some text inputs, a datepicker and a couple of dropdowns. I used Ionic’s default components for them and styled them with CSS so they fit the app’s style better. Everything was pretty simple to do and worked great. Ionic’s docs made it super easy to find the available options and easier ways to theme.</p>\n<p>I wanted to add another thing to this screen too, though: a section containing the island’s villagers, and a search box that allows the user to select them. Just adding another “card” to the UI and making it scroll would deliver what I want, but it wouldn’t look <em>awesome</em>. GitHub’s recently released mobile app has this bottom drawer that I personally found awesome:</p>\n<p><img src=\"/images/posts/ionic-animal-crossing-companion/github-drawer.gif\" alt=\"GitHub's cool bottom drawer\"></p>\n<p>Luckily for me, someone’s already worked on something like that for Ionic, which means I don’t have to do it from scratch! <a href=\"https://github.com/AnthonyCifuentes/ion-slide-drawer\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Click here</a> to check it on GitHub. Unfortunately it is not (at the time of writing) available as an installable component on NPM or somewhere else. But the code is simple and I just copied it over to my own project.</p>\n<h2 id=\"state-management\">State Management<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#state-management\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since the entire point of this app is learning, I decided to use <a href=\"https://ngrx.io\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">NgRx</a>. It is a State Management library for Angular that works in a similar way to VueX or Redux. I’ve worked with VueX recently and really like the concept, so I decided to make use of it here.</p>\n<p>I started by adding it to my application with <code>npm i @ngrx/store @ngrx/effects @ngrx/store-devtools @ngrx/schematics --save</code>. If you wanna learn more about NgRx, I used <a href=\"https://indepth.dev/how-to-start-flying-with-angular-and-ngrx/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this amazing tutorial</a> to learn it for this app.</p>\n<h2 id=\"database\">Database<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#database\"><span class=\"heading-link\">#</span></a></h2>\n<p>The best way to store data in an app like mine - supposed to work on Android, iOS and the Web, but still entirely offline - is using the browser’s IndexedDB. It’s basically a simpler SQL database for your web app that lives inside the browser. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can read more on MDN if you’d like</a>.</p>\n<p>While useful, IndexedDB has a very low-level API, which makes it hard to get started with. Which is why I chose to use <a href=\"https://dexie.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Dexie.js</a> as a wrapper for IndexedDB. It allows me to use a simple API to query data, while already doing the needed optimizations.</p>\n<p>Simply installing Dexie.js and a quick read on its documentation allowed me to successfully store and read persistent data for my app.</p>\n<h2 id=\"putting-some-other-cool-things-in-practice\">Putting some other cool things in practice<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#putting-some-other-cool-things-in-practice\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since the main purpose of developing this app is learning, I decided to use some cool stuff I’ve learned and put them in practice:</p>\n<ul><li><a href=\"/web-workers/\">Web Workers</a>: on first run, the app uses a web worker to parse the game data (contained in large JSON files) in the background, so it can fill the database with the data used on Critterpedia</li>\n<li>Virtual Scroll: on the Critterpedia listings, I used Virtual Scroll instead of pagination. I figured this was a better choice because while it can have a lot of items, it’s a fixed number so no need to paginate. This way it maintains good performance on scrolling even on lower-end devices. Luckily, <a href=\"https://ionicframework.com/docs/api/virtual-scroll\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Ionic provides a built-in component for that</a>!</li>\n<li>Lazy loading images: since all items in the list have an icon that’s displayed besides them, there are lots of images to download. Without lazy-loading, ALL images would be loaded right off the bat, even the ones way down the bottom of the list. With lazy loading, the browser automatically downloads only images as they would appear on screen by just setting the <code>loading</code> attribute: <code>&lt;img loading=&quot;lazy&quot;&gt;</code></li></ul>\n<h2 id=\"running-on-android\">Running on Android<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#running-on-android\"><span class=\"heading-link\">#</span></a></h2>\n<p>After having a few parts of my app done, I decided it was time to run in on my Android phone, to have a better look of how it will look and feel on an actual device.</p>\n<p>The first step for this is installing Android Studio. Install instructions may vary depending on your operating system. I’m on a Linux-based OS so I installed it from <a href=\"https://snapcraft.io/android-studio\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Snapcraft</a>. You can follow the instructions from the <a href=\"https://ionicframework.com/docs/developing/android\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Ionic docs</a> if you’d prefer.</p>\n<p>After installing Android Studio, we need to add an environment variable that points to the Android SDK. In the following command (Linux, Mac), replace the directory with the one where the Sdk is installed in your PC, then add it to the end of your <code>.bashrc</code> file:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ANDROID_SDK_ROOT</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/Library/Android/sdk</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Adding these next lines to the <code>.bashrc</code> file will also give you a quick way to access these Android tools if needed:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token comment\"># avdmanager, sdkmanager</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$ANDROID_SDK_ROOT</span>/tools/bin\n\n<span class=\"token comment\"># adb, logcat</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$ANDROID_SDK_ROOT</span>/platform-tools\n\n<span class=\"token comment\"># emulator</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$ANDROID_SDK_ROOT</span>/emulator</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Now, we have to register Android as a platform for our app. Since we’re using Capacitor to make this bridge, we need only a single command:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ionic capacitor <span class=\"token function\">add</span> android</code><!-- HTML_TAG_END --></pre>\n</div>\n<p><em>If you get an error saying that “Capacitor could not find the web assets directory”, be sure to run <code>ionic build</code> to generate this directory first.</em></p>\n<p>After that’s done, you can open the project in Android Studio (it will be on a folder called <code>Android</code> at the root of your project). If you still haven’t setup a device or emulator to run your app in, do it now. The <a href=\"https://ionicframework.com/docs/developing/android#android-studio\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Ionic docs</a> show how to do both processes.</p>\n<p>After a loooong while, Android Studio will have loaded all it needs to run your project. Just click on Run (Shift+F10). It should open on your phone/emulator!</p>\n<h2 id=\"pwa-preparation\">PWA preparation<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#pwa-preparation\"><span class=\"heading-link\">#</span></a></h2>\n<p>To be able to publish the app as a PWA, we need to add a Service Worker and a Manifest. Thankfully, Angular already has the CLI and the packages that allows us to do that easily. <code>ng add @angular/pwa</code> worked like a charm. This automatically added the needed files, and wired it up with the existing Angular modules automatically.</p>\n<p>After that, I edited <code>ngsw-config.json</code> and <code>manifest.webmanifest</code> files with my app’s name and colors, and I replaced all generated icons with my own. For more details on how to create PWAs with Angular, <a href=\"/angular-pwa-how-to/\">check my specific post for that</a></p>\n<h3 id=\"routing-issue\">Routing issue<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#routing-issue\"><span class=\"heading-link\">#</span></a></h3>\n<p>One issue I was having after publishing a PWA like that is that when refreshing my app on the browser, it was throwing a 404 error. This happened because the route had changed and Angular lost track of what it was supposed to open. I fixed this by changing a line in my <code>app-routing.module.ts</code> and adding <code>useHash: true</code> to the settings:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">app-routing.module.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    RouterModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> preloadingStrategy<span class=\"token operator\">:</span> PreloadAllModules<span class=\"token punctuation\">,</span> useHash<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>RouterModule<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3 id=\"publishing\">Publishing<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#publishing\"><span class=\"heading-link\">#</span></a></h3>\n<p>To host my PWA, I decided to use <a href=\"https://netlify.com\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Netlify</a>. The publishing experience was quite easy and friction-free, and they also provide a free hosting plan which is perfect to host this demo-only-app. I will not document how the publishing proccess worked here because their UI is very intuitive and their docs would be way better than mine anyway.</p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Developing this definitely took me a while - but that’s because time’s been quite scarce for me. Most of the development time was spent learning NgRx, which was definitely the most complex part of this application. It also took me a while to find a good IndexedDB wrapper before I settled on Dexie. The rest was quite straightforward - the app logic is simple, and what took the longest was making the app pretty and the animations smooth. </p>\n<p>I think the result is quite good - definitely not professional, but more than enough for a hobby app. I learned a lot working on it and would definitely do it again. In case you missed it, <a href=\"https://pocketcompanion.fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here’s another link to check out the result</a>, and its <a href=\"https://github.com/matfantinel/acnh-pocket-companion\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">source code</a>.</p>\n<p>Thanks for reading!</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"15 min read","relatedPosts":[{"slug":"2019-year-in-review","title":"Cool things I did and learned in 2019","date":"2019-12-29T00:00:00.000Z","excerpt":"A quick look back at 2019 and what I learned during this year.","tags":["Meta","Open Source"],"html":"<p>Another year went by - Year 6 of my software development journey! I wanted to write this blog post to sum up stuff that I’ve done or learned this year. Keep in mind this is being written off the top of my head - I did not keep a journal throughout the year, but hopefully that’s something I’ll do in 2020.</p>\n<h2 id=\"complexity-is-your-enemy\">Complexity is your enemy<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#complexity-is-your-enemy\"><span class=\"heading-link\">#</span></a></h2>\n<p>As programmers, we are puzzle-solvers. We like to think outside the box, applying different concepts, putting all of those nice things we’ve learned everywhere. This… often backfires. Most of the time what works best are the simplest solutions, which are also easier to maintain in the future by you or others. I’ve seen this quote somewhere a while back: “Programmers spend the first years of their careers mastering complexity only to realize they should master simplicity instead”. I guess I’m not in my first years anymore?</p>\n<p>I’ve changed my process in writing code to this:</p>\n<ol><li>Understand the problem/goal;</li>\n<li>Draw a simple mental picture of how to solve it (really simplify it);</li>\n<li>Code in small steps and test them as you go;</li>\n<li>Make it work. Code can look quite ugly in this step;</li>\n<li>Optimize it, performance-wise;</li>\n<li>⭐️ Try to explain how it works to yourself (mentally or by text), and then refactor the code to be as simple as possible;</li></ol>\n<p>This last step might make the initial release take a little longer, but oh boy does it pay off whenever you or someone else has to maintain it.</p>\n<h2 id=\"vanilla-js-is-the-best\">Vanilla JS is the best<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#vanilla-js-is-the-best\"><span class=\"heading-link\">#</span></a></h2>\n<p>Wait, I’m not saying you shouldn’t use any framework. If it helps you do your work better, go ahead! But “Vanilla” JS has come such a long way and there are so many amazing APIs coming out that using it solely is a valid option again. But more than that, those APIs are built in a way that popular frameworks can use them and communicate with each other with little effort. I’ve covered a bit of this on <a href=\"/microfrontends/\">my Microfrontends post</a>, but there are more APIs that I’ve discovered this year that are pretty awesome:</p>\n<ul><li><a href=\"/microfrontends/\">Web Components/Shadow DOM/Custom Elements</a>;</li>\n<li><a href=\"/web-workers/\">Web Workers</a>;</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">IntersectionObserver</a>;</li>\n<li>Not exactly new, but <a href=\"/what-are-pwas-and-why-should-i-care-about-them/\">PWAs</a> are increasingly awesome;</li></ul>\n<h2 id=\"jekyll\">Jekyll<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#jekyll\"><span class=\"heading-link\">#</span></a></h2>\n<p>I’m a bit late to the party, but this is still something I’ve found out about in 2019. This website/blog you’re seeing is built on top of Jekyll, a tool for making static websites.</p>\n<p>Basically, you have HTML, CSS and JS. Add some special powers for using variables/loops inside that HTML code and ta-da! It works. Jekyll also allows you to create pages from Markdown (.md) files. I use it for blog posts like this one.</p>\n<p>Since it’s a static website, it means the code that’s served to users/visitors is compiled just once and then served as HTML files. No servers or APIs necessary. It’s pretty cool. You can check more about Jekyll <a href=\"https://jekyllrb.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a> and can check the source code for my website <a href=\"https://github.com/matfantinel/matfantinel.github.io\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<h2 id=\"open-source-is-awesome\">Open Source is awesome<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#open-source-is-awesome\"><span class=\"heading-link\">#</span></a></h2>\n<p>I have released two open-source apps this year for elementaryOS (<a href=\"https://github.com/matfantinel/reminduck\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Reminduck</a> and <a href=\"https://github.com/matfantinel/moneta\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Moneta</a>). I gotta say, besides the fact that I was learning an entirely different development stack (Vala, GTK, Desktop native), the best “new” thing I enjoyed was doing it in the open.</p>\n<p>These are not complex, commercial apps or anything like that. They’re small utilities that I use on a daily basis and that were made open and released in hopes of helping anyone out there too. And I gotta say, having users like your software is great, but having them actively contribute to it is even better. As soon as they were released/made public, I started receiving pull requests, bug reports, feature requests, and translations from everywhere. <strong>It’s so amazing that people from all over the world took interest in my little idea and helped improve them any way they could.</strong></p>\n<p>But open source is not just other people contributing to your projects, it’s also the opposite! I can improve other people’s apps that I use, I can report bugs openly and help out, or just download the source code, change a few things just to fit my workflow better and run it. And not only apps, I can do that with the entire OS I run on my PC! Not to mention having access to other people’s code allows you to learn from their work and saves you tons of time. Having a problem on your app and you know one that has solved that? Just check out what they did. Copy it, modify it, learn it, ship it. It’s all good.  <span class=\"wrapper svelte-1sgfl7c\">We wouldn’t have to spend so much time reinventing wheels if more of our code was open.</span></p>\n<p>Ah, this website is also open source. I used others as inspiration and took some code snippets too! So can you, feel free to fork it and modify anyway you want.</p>\n<h2 id=\"working-remotely-is-fun-at-least-for-some-people\">Working remotely is fun, at least for some people<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#working-remotely-is-fun-at-least-for-some-people\"><span class=\"heading-link\">#</span></a></h2>\n<p>In August I started working remotely for the first time. I work from my home in Brazil with people from US, Europe and India. It was definitely refreshing to not have to commute and always be at a place that makes you feel good. Not only that, but the flexible hours allow me to work whenever I want and I can enjoy things that weren’t possible on a regular “9 to 5” routine.</p>\n<p>Although… I end up working the same hours as I did before. It feels “right” to work at this time, and I can enjoy my family at night, since they also work during the day. But it’s nice to have the flexibility to have a break and a coffee somewhere else during the day if needed.</p>\n<p>One of the main things people say about working from home is that sometimes it’s hard to separate work time from free time. Fortunately, I didn’t have that issue. My apartment is quite small, so I don’t have a proper office and instead work on a desk on my bedroom, which means the temptation of lying down and sleeping is always beside me. I’m so thankful I am able to resist that and get work done. And after work hours I can fully disconnect from it and not be stressed out, even if I stay on the computer. I totally understand why some people would not enjoy this and would be less productive, fortunately I was not the case.</p>\n<p>The one thing I’d say is worse in my case is communication. I’m not an extremely social person - therefore I don’t miss chitchat during the day with colleagues or anything like that. It’s just that it’s harder to explain code and concepts over a call or screen share. Not everyone is always readily available to explain things because of different timezones, so you have to figure more things out on your own. It’s still doable though, and the days of “just coding” without interruptions are a dream. The pros outweight the cons.</p>\n<h2 id=\"theres-never-enough-time\">There’s never enough time<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#theres-never-enough-time\"><span class=\"heading-link\">#</span></a></h2>\n<p>This year, I started getting into writing more open source software and started working from home. The latter means I can work more on house chores since there’s no commute and I’m always around! Still, there’s never enough time for me to do what I want to do. I took time to write some elementaryOS apps, but I want to do some web apps too, and code some more, and play some games, watch series, movies, hang out with family, work, write on this blog, oof. This isn’t a new discovery by any means, but I feel like it’s getting worse every year. This is adult life, I guess.</p>\n<h2 id=\"wrapping-up\">Wrapping up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Anyway, 2019 was a good year. I (of course) hope to do more and better in 2020, hopefully including more articles here. Hope you all have some nice holidays and a great new year!</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":"","readingTime":"7 min read"},{"slug":"open-source-x-free-software","title":"Open Source x Free Software: What's the difference?","date":"2019-03-23T00:00:00.000Z","excerpt":"Learn the difference between these two terms that often get mixed up.","tags":["Free Software","Open Source","Concepts","FOSS","FLOSS","Libre Software","Freedom"],"html":"<p>Free software is a concept that’s been around for a long time, and so is open source. At first glance, they may seem like the same thing with different names. However, they are very different in their philosophy. In this article, I’ll explain what each one is and how they are different.</p>\n<h2 id=\"free-software\">Free Software<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#free-software\"><span class=\"heading-link\">#</span></a></h2>\n<p>According to the <a href=\"https://www.fsf.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Free Software Foundation (FSF)</a>, free software is the software that respects the user’s freedom and sense of community. This means that the user has the freedom to run, copy, distribute, study, change and improve it.</p>\n<p>A common phrase you may read somewhere is “Free as in freedom, not as in beer”. This means that the name doesn’t indicate that the software is free of charge, only that the user has the freedom to do whatever they want with it.</p>\n<p>The FSF lists four essential freedoms that every free software must follow:</p>\n<ul><li>The freedom to run the program as you wish, for any purpose (freedom 0);</li>\n<li>The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this;</li>\n<li>The freedom to redistribute copies so you can help others (freedom 2);</li>\n<li>The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.</li></ul>\n<p>You can read more about Free Software at gnu.org, <a href=\"https://www.gnu.org/philosophy/free-sw.en.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<h2 id=\"open-source\">Open Source<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#open-source\"><span class=\"heading-link\">#</span></a></h2>\n<p>The <a href=\"https://opensource.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Open Source Initiative</a> defines 10 criteria for software to be considered open source. You can read them fully <a href=\"https://opensource.org/docs/definition.php\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>. I’ll summarize them below:</p>\n<ul><li>Any person must be able to distribute or sell the software without restrictions;</li>\n<li>The source code must be distributed along with the software, or at least link to it clearly;</li>\n<li>A copy of the license must be distributed with the software;</li>\n<li>People must be able to modify your software and redistribute it with the same license;</li>\n<li>Modifications must only be redistributed with a different name or version than the original code;</li></ul>\n<h2 id=\"the-difference\">The Difference<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-difference\"><span class=\"heading-link\">#</span></a></h2>\n<p>By reading each concept’s principles above, you can get the idea that Open Source is a more neutral concept when compared to Free Software. It does not deal with the user’s freedom, only with the technical aspects of the software. Richard Stallman, the founder on FSF, summarized really well the differences between the two concepts:</p>\n<blockquote><p>The terms “free software” and “open source” stand for almost the same range of programs. However, they say deeply different things about those programs, based on different values. The free software movement campaigns for freedom for the users of computing; it is a movement for freedom and justice. By contrast, the open source idea values mainly practical advantage and does not campaign for principles. - Richard Stallman</p></blockquote>\n<p>You can read more about it <a href=\"https://www.gnu.org/philosophy/open-source-misses-the-point.en.html\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<h2 id=\"tldr\">TL;DR<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tldr\"><span class=\"heading-link\">#</span></a></h2>\n<p>Open Source is a technical, practical concept. Free Software is a philosophical, broader concept. Since Free Software already considers the technical aspects of Open Source, we can say that <strong>Every Free Software is Open Source, but not every Open Source is Free Software</strong>.</p>\n<h3 id=\"how-to-know-if-an-open-source-software-is-free-software\">How to know if an Open Source software is Free Software?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-to-know-if-an-open-source-software-is-free-software\"><span class=\"heading-link\">#</span></a></h3>\n<p>The easiest way is to check their license. <a href=\"https://www.gnu.org/licenses/license-list.html#SoftwareLicenses\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The FSF lists all Free Software licenses here</a>, but usually most of them are under the GPL or MIT licenses.</p>\n<p>Thanks for reading!</p>","css":{"code":"","map":null},"head":"","readingTime":"4 min read"},{"slug":"what-are-pwas-and-why-should-i-care-about-them","title":"What are PWAs and why should I care about them?","date":"2019-03-12T00:00:00.000Z","excerpt":"We see a lot of talk about PWAs, but the concept is not that easy to understand.","tags":["Front-End","PWA","JavaScript"],"html":"<p>Progressive Web Apps are not new, but they are becoming more and more popular everyday. Big companies like Facebook, Twitter and Google have been using them for a while, and while they’re often designed for mobile, recent pushes from Microsoft and Chrome are making them a good option even for desktop.</p>\n<p><a href=\"/angular-pwa-how-to\">I’ve covered how you can turn your Angular 6+ app into a PWA here</a>. Now, let’s see why you should do that.</p>\n<h2 id=\"what-is-a-pwa\">What is a PWA?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-is-a-pwa\"><span class=\"heading-link\">#</span></a></h2>\n<p>Native apps, the ones that are designed to work specifically on Mobile/Desktop OSs, usually have some useful features, like access to the device’s functionalities like camera, GPS, sending notifications, working offline, and so on. They also are able to utilize the device’s full screen (on mobile), show up on the home screen, and are usually pretty fast to load.Web apps though, need to be accessed by a browser. This takes away some screen real estate, since the browser’s UI is also shown. They cannot work offline, can only show up on the home screen as a shortcut to the browser, and usually take longer to load, since its assets need to be loaded from the web.</p>\n<p>PWAs, or Progressive Web Apps, are basically websites that have the ability to deliver a native app-like experience, by sending notifications, offering a snappier and more responsive experience, working offline, etc. This is achieved with the use of modern Web APIs, and a little thing called <strong>Service Worker</strong>.</p>\n<p><em>Please keep in mind that hybrid apps developed with Ionic, Cordova, or similar frameworks <strong>are not PWAs</strong>, since they are installed like a real app and have full access to the device.</em></p>\n<h3 id=\"service-worker\">Service Worker?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#service-worker\"><span class=\"heading-link\">#</span></a></h3>\n<p>A Service Worker is like a client-side proxy, written in Javascript, that powers offline functionality, push notifications, caching, updating, and more.</p>\n<p>They can, for instance, listen for any http requests and handle them nicely, like retrieving cached data if there’s no internet connection. To avoid problems with updates, since it caches content more aggressively, it can be configured to update itself everytime it sees there is a new version online. This avoids problems with users using older versions of our web apps (and therefore gets rid of native apps’ biggest nuisance).</p>\n<p>This all may sound complicated, which is why there are many “recipes” of Service Workers around the web. They are still JavaScript files, so it’s not hard to adapt and improve them at your own pace.</p>\n<p>You probably have already found some of them in the wild. In Chrome for Android, opening a certain website might trigger this panel at the bottom of the screen:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/what-are-pwas-and-why-should-i-care-about-them/Android-Install-Prompt.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/what-are-pwas-and-why-should-i-care-about-them/Android-Install-Prompt.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/what-are-pwas-and-why-should-i-care-about-them/Android-Install-Prompt.png\" alt=\"PWA Install Prompt on Android\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n    <figcaption><!-- HTML_TAG_START -->'Add Notepad to the home screen'<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>And on Desktop, this option shows up in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/what-are-pwas-and-why-should-i-care-about-them/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/what-are-pwas-and-why-should-i-care-about-them/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/what-are-pwas-and-why-should-i-care-about-them/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>With this, your app is able to be displayed on your phone or PC’s app list just like any other app. Cool!</p>\n<p><em>Keep in mind that for now only a few Chromium-based browsers offer this functionality on Android. Firefox, sadly, is not allowed by Google to create WebAPKs (how these are called). Thanks, free market!</em> 🙄</p>\n<h2 id=\"thats-nice-and-all-but-how-would-my-app-benefit-from-it\">That’s nice and all… But how would my app benefit from it?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#thats-nice-and-all-but-how-would-my-app-benefit-from-it\"><span class=\"heading-link\">#</span></a></h2>\n<p>Let’s get one thing out of the way first - <strong>PWAs are not a replacement for native apps</strong>. They have more limitations, and overall offer worse performance than a native app written in Java/Swift. Their purpose is to offer a better user experience for web apps that are used often by users. If you have a complex web app, and do not have the time/resources or simply don’t think it’s worth it to create a native counterpart, PWAs are for you. I will compare PWAs to hybrid apps, like the ones built on Ionic.</p>\n<p>The first main advantage is that the entry barrier is lower. Research shows that <a href=\"https://techcrunch.com/2017/08/25/majority-of-u-s-consumers-still-download-zero-apps-per-month-says-comscore/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the majority of mobile users in the US download an average of 0 apps monthly</a>. That’s zero. None. That may be because searching for an app in the app store may be a bit counterintuitive depending on the situation. Let’s imagine that you have an hybrid app on the app store. Your new user probably found out about your app/service on its website, so they’re already in the browser:</p>\n<ol><li>Logs in to your app on the browser;</li>\n<li>You detect that they’re using a mobile phone, so you can show them a banner to download your app on the store;</li>\n<li>They open the app store;</li>\n<li>They try to download your app. Or, they might give up because they’re on their limited data plan, and avoids downloading apps on it.</li>\n<li>They can either return to the web app on the browser, with all the disavantadges mentioned before, or use your hybrid app.</li></ol>\n<p>If the user has installed your app, cool! However, you must still keep one thing in mind: your app updates independently from your web app, and the updates will take longer. Some users might even disable autoupdates altogether. Depending on how your app works, you might suffer from users using outdated versions of the code, which might result in issues for them and for you.</p>\n<p>Now let’s imagine the same flow, but with a PWA:</p>\n<ol><li>Logs in to your app on the browser;</li>\n<li>A panel shows up on the bottom of their screen: “Hey, add this to your home screen!“;</li>\n<li>The app is installed into the user’s phone and can now be accessed from the app list, with better screen estate, better performance (because of caching), and easier to open;</li>\n<li>Your app is always on-par with the web version.</li></ol>\n<p>Another worthy thing to mention is that you don’t have to go through the hassle of publishing an app on the app store!</p>\n<h2 id=\"there-are-advantages-even-if-the-user-doesnt-install-your-web-app\">There are advantages even if the user doesn’t install your web app<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#there-are-advantages-even-if-the-user-doesnt-install-your-web-app\"><span class=\"heading-link\">#</span></a></h2>\n<p>So far I’ve covered how your app would benefit from users being able to install the app directly from the browser. But still, a lot of the PWA benefits still apply even if they don’t.</p>\n<p>Even when opened in a browser, a PWA can still offer:</p>\n<ul><li>Better speed after first load, due to the more aggressive cacheing of the static content;</li>\n<li>Less jankiness and more responsiveness overall, since the content will be loaded from the user’s device instead of downloaded dynamically;</li>\n<li>Won’t be affected by variations in the user’s connection.</li></ul>\n<h2 id=\"how-can-i-convince-my-boss-to-let-me-work-on-this\">How can I convince my boss to let me work on this?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-can-i-convince-my-boss-to-let-me-work-on-this\"><span class=\"heading-link\">#</span></a></h2>\n<p>Well, every boss is different. But <a href=\"http://https//developers.google.com/web/progressive-web-apps/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Google provides some neat statistics that may help you in your endeavor</a>:</p>\n<ul><li>Push notifications increase user engagement by up to 4 times;</li>\n<li>Some use cases report that the increase in conversions after transitioning to a PWA was of 104%!</li></ul>\n<h2 id=\"as-with-all-things-dont-overdo-it\">As with all things, don’t overdo it<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#as-with-all-things-dont-overdo-it\"><span class=\"heading-link\">#</span></a></h2>\n<p>This article covered the concept and advantages of PWAs, but keep in mind that they are not for every use case. <strong>Use it for web apps that users will find themselves coming back to frequently</strong>. There’s no point in doing it for your company’s website or static websites. It’s also worth remembering that <strong>PWAs do not replace native apps, they are just a lower-effort alternative for web apps without native counterparts</strong>.</p>\n<p>It’s also worth mentioning that the advantages cited in this article are, as of March 2019, <strong>fully supported only by Google Chrome/Chromium</strong>. Google’s been pushing PWAs hardly lately and other companies still have some catching up to do. iOS 11.3 saw the addition of basic PWA capabilities on Safari, but some features still do not work. Firefox for Android also supports some PWA capabilities, but does not prompt the user the same way Chrome does (because Google won’t allow it, may I add).</p>\n<p>Thanks for reading!</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":"","readingTime":"7 min read"}]}